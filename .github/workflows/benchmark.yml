name: Benchmark

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  benchmark:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for comparisons
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t zsh-benchmark .

      - name: Run benchmark
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/results:/benchmark/results \
            -v ${{ github.workspace }}/README.md:/benchmark/README.md \
            zsh-benchmark

      - name: Generate graphs
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/benchmark \
            --entrypoint deno \
            zsh-benchmark run --allow-all src/chart-generator.ts

      - name: Generate README
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/benchmark \
            --entrypoint deno \
            zsh-benchmark run --allow-all src/generate-readme.ts

      - name: Save benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: pr-benchmark-results
          path: results/benchmark-results-latest.json

      - name: Compare with main branch
        if: github.event_name == 'pull_request'
        id: compare
        run: |
          # Checkout main branch results
          git fetch origin main
          git checkout origin/main -- results/benchmark-results-latest.json 2>/dev/null || echo "No previous results"

          if [ -f results/benchmark-results-latest.json ]; then
            mv results/benchmark-results-latest.json results/main.json
          fi

          # Restore current results
          git checkout HEAD -- results/benchmark-results-latest.json

          # Generate comparison if both files exist
          if [ -f results/main.json ] && [ -f results/benchmark-results-latest.json ]; then
            docker run --rm \
              -v ${{ github.workspace }}:/benchmark \
              --entrypoint deno \
              zsh-benchmark run --allow-all -c "
                const main = JSON.parse(await Deno.readTextFile('results/main.json'));
                const pr = JSON.parse(await Deno.readTextFile('results/benchmark-results-latest.json'));
                const comparison = [];

                // Compare 25 plugin results
                for (const manager of pr.managers) {
                  const prResult = manager.results['25'];
                  const mainManager = main.managers.find(m => m.name === manager.name);
                  const mainResult = mainManager?.results['25'];
                  
                  if (prResult && mainResult) {
                    const loadDiff = ((prResult.loadTime - mainResult.loadTime) / mainResult.loadTime * 100).toFixed(1);
                    const installDiff = ((prResult.installTime - mainResult.installTime) / mainResult.installTime * 100).toFixed(1);
                    comparison.push({
                      manager: manager.name,
                      loadTime: prResult.loadTime,
                      loadDiff: loadDiff,
                      installTime: prResult.installTime,
                      installDiff: installDiff
                    });
                  }
                }

                await Deno.writeTextFile('results/comparison.json', JSON.stringify(comparison, null, 2));
              "
          fi

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## ðŸ“Š Benchmark Results\n\n';

            // Read latest results
            const results = JSON.parse(fs.readFileSync('results/benchmark-results-latest.json', 'utf8'));

            // Add results table for 25 plugins
            comment += '### Current Results (25 Plugins)\n\n';
            comment += '| Plugin Manager | Install Time | Load Time |\n';
            comment += '|----------------|--------------|----------|\n';

            const managerResults = [];
            for (const manager of results.managers) {
              const result = manager.results['25'];
              if (result) {
                managerResults.push({
                  name: manager.name,
                  installTime: result.installTime,
                  loadTime: result.loadTime
                });
              }
            }

            const sorted = managerResults.sort((a, b) => a.loadTime - b.loadTime);
            for (const result of sorted) {
              comment += `| ${result.name} | ${result.installTime.toFixed(1)}ms | ${result.loadTime.toFixed(1)}ms |\n`;
            }

            // Add comparison if available
            if (fs.existsSync('results/comparison.json')) {
              const comparison = JSON.parse(fs.readFileSync('results/comparison.json', 'utf8'));

              comment += '\n### Comparison with main branch\n\n';
              comment += '| Plugin Manager | Load Time | Change | Install Time | Change |\n';
              comment += '|----------------|-----------|--------|--------------|--------|\n';

              for (const comp of comparison) {
                const loadEmoji = comp.loadDiff > 5 ? 'ðŸ”´' : comp.loadDiff < -5 ? 'ðŸŸ¢' : 'âšª';
                const installEmoji = comp.installDiff > 5 ? 'ðŸ”´' : comp.installDiff < -5 ? 'ðŸŸ¢' : 'âšª';
                comment += `| ${comp.manager} | ${comp.loadTime.toFixed(1)}ms | ${loadEmoji} ${comp.loadDiff}% | ${comp.installTime.toFixed(1)}ms | ${installEmoji} ${comp.installDiff}% |\n`;
              }

              comment += '\nðŸŸ¢ Improvement | âšª No significant change | ðŸ”´ Regression\n';
            }

            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('ðŸ“Š Benchmark Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Commit results
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          git add README.md results/
          if ! git diff --staged --quiet; then
            git commit -m "Update benchmark results [skip ci]"
            
            # Pull latest changes and rebase
            git pull --rebase origin main
            
            # Push with retry logic
            max_attempts=3
            attempt=1
            while [ $attempt -le $max_attempts ]; do
              echo "Push attempt $attempt of $max_attempts"
              if git push; then
                echo "Push successful"
                break
              else
                if [ $attempt -eq $max_attempts ]; then
                  echo "Failed to push after $max_attempts attempts"
                  exit 1
                fi
                echo "Push failed, retrying in 5 seconds..."
                sleep 5
                git pull --rebase origin main
                attempt=$((attempt + 1))
              fi
            done
          else
            echo "No changes to commit"
          fi

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: results/
