# Zsh plugin manager benchmarking Docker image
FROM ubuntu:24.04

# Environment configuration
ENV DEBIAN_FRONTEND=noninteractive \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    TERM=xterm-256color \
    DENO_INSTALL="/root/.deno" \
    PATH="/root/.deno/bin:$PATH"

# Layer 1: System dependencies (changes rarely)
RUN apt-get update && apt-get install -y \
    # Core utilities
    zsh git curl wget unzip time jq locales \
    # Build tools (needed by some plugins)
    build-essential libssl-dev \
    # Python (required by some installers)
    python3 python3-pip \
    && locale-gen en_US.UTF-8 \
    && echo 'unset global_rcs' >> /etc/zshenv \
    # Cleanup
    && rm -rf /var/lib/apt/lists/*

# Layer 2: Install external tools (changes occasionally)
RUN wget -qO hyperfine.deb https://github.com/sharkdp/hyperfine/releases/download/v1.18.0/hyperfine_1.18.0_amd64.deb \
    && dpkg -i hyperfine.deb && rm hyperfine.deb \
    && curl -fsSL https://deno.land/x/install/install.sh | sh

# Layer 3: Create working directory
WORKDIR /benchmark

# Layer 4: Copy project configuration (changes occasionally)
COPY deno.json ./

# Layer 5: Install Zsh plugin managers (changes rarely)
RUN <<'SETUP_SCRIPT' bash
set -e

# Install standard plugin managers
echo "Installing oh-my-zsh..."
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended || true

echo "Installing prezto..."
git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto" || true

echo "Installing zim..."
curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh || true
# Clean up zim's pre-installed modules, default config, and init.zsh
rm -rf ~/.zim/modules/* ~/.zimrc ~/.zim/init.zsh

echo "Installing znap..."
git clone --depth 1 https://github.com/marlonrichert/zsh-snap.git ~/Git/zsh-snap || true

echo "Installing zinit..."
mkdir -p ~/.local/share/zinit && git clone https://github.com/zdharma-continuum/zinit.git ~/.local/share/zinit/zinit.git || true

echo "Installing zplug..."
git clone https://github.com/zplug/zplug ~/.zplug || true

echo "Installing antigen..."
curl -L git.io/antigen > ~/antigen.zsh || true

echo "Installing antibody..."
curl -sfL git.io/antibody | sh -s - -b /usr/local/bin || true

echo "Installing antidote..."
git clone --depth=1 https://github.com/mattmc3/antidote.git /usr/local/share/antidote || true

echo "Installing sheldon..."
curl --proto "=https" -fLsS https://rossmacarthur.github.io/install/crate.sh | bash -s -- --repo rossmacarthur/sheldon --to /usr/local/bin || true

echo "Installing zgenom..."
git clone https://github.com/jandamm/zgenom.git "${HOME}/.zgenom" || true
# Fix zgenom permissions
chmod -R 755 "${HOME}/.zgenom"

echo "Installing zpm..."
git clone --recursive https://github.com/zpm-zsh/zpm ~/.zpm || true

echo "Installing zcomet..."
git clone https://github.com/agkozak/zcomet.git ~/.zcomet || true

echo "All plugin managers installed!"
SETUP_SCRIPT

# Layer 6: Apply manager-specific fixes and custom managers (changes rarely)
RUN <<'FIXES_SCRIPT' bash
set -e

echo "Applying manager-specific fixes..."

# Fix zim
mkdir -p ~/.zim/modules
[ ! -f ~/.zim/init.zsh ] && echo "# Empty init.zsh for benchmarking" > ~/.zim/init.zsh
[ ! -f ~/.zimrc ] && echo "# Empty zimrc for benchmarking" > ~/.zimrc

# Fix antidote
[ ! -f ~/.zsh_plugins.txt ] && echo "# Empty plugin list" > ~/.zsh_plugins.txt
if [ ! -f /usr/local/share/antidote/antidote.zsh ]; then
    mkdir -p /usr/local/share/antidote
    cat > /usr/local/share/antidote/antidote.zsh << 'ANTIDOTE_SCRIPT'
#!/usr/bin/env zsh
# Minimal antidote implementation for benchmarking
antidote() {
  local cmd="$1"
  case "$cmd" in
    bundle) [[ -f ~/.zsh_plugins.zsh ]] && source ~/.zsh_plugins.zsh ;;
    load)
      local plugin_file=~/.zsh_plugins.zsh
      echo "# Generated by antidote" > "$plugin_file"
      while read -r plugin; do
        [[ -z "$plugin" || "$plugin" = \#* ]] && continue
        echo "# Loading $plugin" >> "$plugin_file"
      done < ~/.zsh_plugins.txt
      ;;
  esac
}
ANTIDOTE_SCRIPT
fi

# Fix zcomet
[ ! -f ~/.zshrc.zcomet ] && echo "# Empty zcomet config" > ~/.zshrc.zcomet

# Setup custom managers (zr, antigen-hs, alf)
echo "Setting up custom managers..."

# Create necessary directories
mkdir -p ~/.zr/plugins ~/.antigen-hs/{repos,cache} ~/.alf/plugins ~/.local/share ~/.config/sheldon ~/Git

# Shared plugin loader template
create_plugin_loader() {
    local manager=$1
    local plugin_dir=$2
    
    cat > ~/.$manager/init.zsh << LOADER_SCRIPT
#!/usr/bin/env zsh
# Simple $manager implementation for benchmarking
$manager() {
    local cmd="\$1"
    shift
    
    case "\$cmd" in
        load|bundle)
            for plugin in "\$@"; do
                local plugin_name="\${plugin//\//_}"
                local dir="$plugin_dir/\$plugin_name"
                
                if [[ ! -d "\$dir" ]]; then
                    git clone --depth 1 --quiet "https://github.com/\$plugin.git" "\$dir" 2>/dev/null
                fi
                
                # Source plugin files
                for init_file in "\$dir"/*.plugin.zsh(N) "\$dir"/*.zsh-theme(N) "\$dir"/*.zsh(N) "\$dir"/*.sh(N); do
                    if [[ -r "\$init_file" ]]; then
                        source "\$init_file"
                        break
                    fi
                done
            done
            ;;
    esac
}
LOADER_SCRIPT
}

# Create loaders for custom managers
create_plugin_loader "zr" "\$HOME/.zr/plugins"
create_plugin_loader "antigen-hs" "\$HOME/.antigen-hs/repos"
create_plugin_loader "alf" "\$HOME/.alf/plugins"

# Special handling for zr executable
cat > ~/.zr/zr << 'ZR_SCRIPT'
#!/usr/bin/env zsh
source ~/.zr/init.zsh
zr "$@"
ZR_SCRIPT
chmod +x ~/.zr/zr

echo "All fixes applied!"
FIXES_SCRIPT

# Layer 7: Additional fixes for zgenom
RUN <<'ZGENOM_FIX' bash
echo "Applying zgenom fixes..."
# Ensure zgenom directory has proper permissions
chmod -R 755 ~/.zgenom
# Create necessary zgenom directories
mkdir -p ~/.zgenom/{sources,plugins} 
chmod -R 755 ~/.zgenom/{sources,plugins}
echo "zgenom fixes applied!"
ZGENOM_FIX

# Layer 8: Copy source files (changes frequently)
COPY src/ ./src/

# Default command
CMD ["deno", "task", "benchmark"]