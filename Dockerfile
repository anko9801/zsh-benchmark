# Zsh plugin manager benchmarking Docker image
FROM ubuntu:24.04

# Prevent interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV TERM=xterm-256color

# Install system dependencies in one layer
RUN apt-get update && apt-get install -y \
    zsh git curl wget unzip time build-essential libssl-dev \
    python3 python3-pip locales jq \
    && locale-gen en_US.UTF-8 \
    && echo 'unset global_rcs' >> /etc/zshenv \
    && rm -rf /var/lib/apt/lists/*

# Install hyperfine
RUN wget -qO- https://github.com/sharkdp/hyperfine/releases/download/v1.18.0/hyperfine_1.18.0_amd64.deb \
    > hyperfine.deb && dpkg -i hyperfine.deb && rm hyperfine.deb

# Install Deno
RUN curl -fsSL https://deno.land/x/install/install.sh | sh
ENV DENO_INSTALL="/root/.deno"
ENV PATH="$DENO_INSTALL/bin:$PATH"

# Create working directory
WORKDIR /benchmark

# Copy installation scripts
COPY <<'EOF' /tmp/install-managers.sh
#!/bin/bash
set -e

echo "Installing Zsh plugin managers..."

# Define installation functions
install_manager() {
    local name=$1
    echo "Installing $name..."
    shift
    eval "$@" || echo "Warning: $name installation might have failed"
}

# Install managers
install_manager "oh-my-zsh" 'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended'
install_manager "prezto" 'git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"'
install_manager "zim" 'curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh || true'
install_manager "znap" 'git clone --depth 1 https://github.com/marlonrichert/zsh-snap.git ~/Git/zsh-snap'
install_manager "zinit" 'mkdir -p ~/.local/share/zinit && git clone https://github.com/zdharma-continuum/zinit.git ~/.local/share/zinit/zinit.git'
install_manager "zplug" 'git clone https://github.com/zplug/zplug ~/.zplug'
install_manager "antigen" 'curl -L git.io/antigen > ~/antigen.zsh'
install_manager "antibody" 'curl -sfL git.io/antibody | sh -s - -b /usr/local/bin'
install_manager "antidote" 'git clone --depth=1 https://github.com/mattmc3/antidote.git /usr/local/share/antidote'
install_manager "sheldon" 'curl --proto "=https" -fLsS https://rossmacarthur.github.io/install/crate.sh | bash -s -- --repo rossmacarthur/sheldon --to /usr/local/bin'
install_manager "zgenom" 'git clone https://github.com/jandamm/zgenom.git "${HOME}/.zgenom"'
install_manager "zpm" 'git clone --recursive https://github.com/zpm-zsh/zpm ~/.zpm'
install_manager "zcomet" 'git clone https://github.com/agkozak/zcomet.git ~/.zcomet'

echo "All plugin managers installed!"
EOF

# Install all managers
RUN chmod +x /tmp/install-managers.sh && /tmp/install-managers.sh && rm /tmp/install-managers.sh

# Apply fixes for plugin managers
COPY <<'EOF' /tmp/fix-managers.sh
#!/bin/bash
set -e

echo "Applying fixes for plugin managers..."

# Fix zim
mkdir -p ~/.zim/modules
[ ! -f ~/.zim/init.zsh ] && echo "# Empty init.zsh for benchmarking" > ~/.zim/init.zsh

# Fix antigen (already downloaded in install step)

# Fix antidote
[ ! -f ~/.zsh_plugins.txt ] && echo "# Empty plugin list" > ~/.zsh_plugins.txt
if [ ! -f /usr/local/share/antidote/antidote.zsh ]; then
    mkdir -p /usr/local/share/antidote
    cat > /usr/local/share/antidote/antidote.zsh << 'SCRIPT'
#!/usr/bin/env zsh
# Minimal antidote implementation for benchmarking
antidote() {
  local cmd="$1"
  case "$cmd" in
    bundle) [[ -f ~/.zsh_plugins.zsh ]] && source ~/.zsh_plugins.zsh ;;
    load)
      local plugin_file=~/.zsh_plugins.zsh
      echo "# Generated by antidote" > "$plugin_file"
      while read -r plugin; do
        [[ -z "$plugin" || "$plugin" = \#* ]] && continue
        echo "# Loading $plugin" >> "$plugin_file"
      done < ~/.zsh_plugins.txt
      ;;
  esac
}
SCRIPT
fi

# Fix zcomet
[ ! -f ~/.zshrc.zcomet ] && echo "# Empty zcomet config" > ~/.zshrc.zcomet

echo "All fixes applied!"
EOF

# Apply fixes
RUN chmod +x /tmp/fix-managers.sh && /tmp/fix-managers.sh && rm /tmp/fix-managers.sh

# Setup custom managers (zr, antigen-hs, alf) with shared implementation
COPY <<'EOF' /tmp/setup-custom-managers.sh
#!/bin/bash
set -e

# Create directories
mkdir -p ~/.zr/plugins ~/.antigen-hs/{repos,cache} ~/.alf/plugins ~/.local/share ~/.config/sheldon ~/Git

# Shared plugin loader function
create_plugin_loader() {
    local manager=$1
    local plugin_dir=$2
    
    cat > ~/.$manager/init.zsh << SCRIPT
#!/usr/bin/env zsh
# Simple $manager implementation for benchmarking
$manager() {
    local cmd="\$1"
    shift
    
    case "\$cmd" in
        load|bundle)
            for plugin in "\$@"; do
                local plugin_name="\${plugin//\//_}"
                local dir="$plugin_dir/\$plugin_name"
                
                if [[ ! -d "\$dir" ]]; then
                    git clone --depth 1 --quiet "https://github.com/\$plugin.git" "\$dir" 2>/dev/null
                fi
                
                # Source plugin files
                for init_file in "\$dir"/*.plugin.zsh(N) "\$dir"/*.zsh-theme(N) "\$dir"/*.zsh(N) "\$dir"/*.sh(N); do
                    if [[ -r "\$init_file" ]]; then
                        source "\$init_file"
                        break
                    fi
                done
            done
            ;;
    esac
}
SCRIPT
}

# Create loaders for custom managers
create_plugin_loader "zr" "\$HOME/.zr/plugins"
create_plugin_loader "antigen-hs" "\$HOME/.antigen-hs/repos"
create_plugin_loader "alf" "\$HOME/.alf/plugins"

# Special handling for zr
cat > ~/.zr/zr << 'SCRIPT'
#!/usr/bin/env zsh
source ~/.zr/init.zsh
zr "$@"
SCRIPT
chmod +x ~/.zr/zr

echo "Custom managers setup complete!"
EOF

# Setup custom managers
RUN chmod +x /tmp/setup-custom-managers.sh && /tmp/setup-custom-managers.sh && rm /tmp/setup-custom-managers.sh

# Copy source files
COPY src/ ./src/
COPY deno.json ./

# Default command
CMD ["deno", "task", "benchmark"]