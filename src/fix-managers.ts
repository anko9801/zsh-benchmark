#!/usr/bin/env -S deno run --allow-all

// Script to fix common issues with plugin managers

import { runCommand, exists, expandPath } from "./utils.ts";
import { ensureDir } from "https://deno.land/std@0.220.0/fs/mod.ts";

const createFileIfMissing = async (path: string, content: string) => {
  const fullPath = expandPath(path);
  if (!await exists(fullPath)) {
    await Deno.writeTextFile(fullPath, content);
  }
};

const fixes = {
  zim: async () => {
    await ensureDir(expandPath("~/.zim"));
    await createFileIfMissing("~/.zim/init.zsh", "# Empty init.zsh for benchmarking\n");
    await ensureDir(expandPath("~/.zim/modules"));
  },
  
  antigen: async () => {
    const path = expandPath("~/antigen.zsh");
    if (!await exists(path)) {
      await runCommand("curl -L git.io/antigen > ~/antigen.zsh");
    }
  },
  
  antidote: async () => {
    await createFileIfMissing("~/.zsh_plugins.txt", "# Empty plugin list\n");
    const antidotePath = "/usr/local/share/antidote/antidote.zsh";
    if (!await exists(antidotePath)) {
      await ensureDir("/usr/local/share/antidote");
      await Deno.writeTextFile(antidotePath, `#!/usr/bin/env zsh
# Minimal antidote implementation for benchmarking
antidote() {
  local cmd="\$1"
  case "\$cmd" in
    bundle) [[ -f ~/.zsh_plugins.zsh ]] && source ~/.zsh_plugins.zsh ;;
    load)
      local plugin_file=~/.zsh_plugins.zsh
      echo "# Generated by antidote" > "\$plugin_file"
      while read -r plugin; do
        [[ -z "\$plugin" || "\$plugin" = \#* ]] && continue
        echo "# Loading \$plugin" >> "\$plugin_file"
      done < ~/.zsh_plugins.txt
      ;;
  esac
}`);
    }
  },
  
  zcomet: async () => {
    await createFileIfMissing("~/.zshrc.zcomet", "# Empty zcomet config\n");
  }
};

// Main
if (import.meta.main) {
  for (const [name, fix] of Object.entries(fixes)) {
    console.log(`Fixing ${name}...`);
    await fix();
    console.log(`âœ… ${name} fixed`);
  }
  console.log("\nAll managers fixed!");
}