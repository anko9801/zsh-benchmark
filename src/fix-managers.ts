#!/usr/bin/env -S deno run --allow-all

// Script to fix common issues with plugin managers

import { runCommand, exists, expandPath } from "./utils.ts";
import { ensureDir } from "https://deno.land/std@0.220.0/fs/mod.ts";

async function fixZim() {
  console.log("Fixing zim...");
  
  // Create empty init.zsh if needed
  const zimHome = expandPath("~/.zim");
  await ensureDir(zimHome);
  
  const initPath = expandPath("~/.zim/init.zsh");
  if (!await exists(initPath)) {
    await Deno.writeTextFile(initPath, "# Empty init.zsh for benchmarking\n");
  }
  
  // Create modules directory
  await ensureDir(expandPath("~/.zim/modules"));
  
  console.log("✅ zim fixed");
}

async function fixAntigen() {
  console.log("Fixing antigen...");
  
  // Ensure antigen.zsh exists
  const antigenPath = expandPath("~/antigen.zsh");
  if (!await exists(antigenPath)) {
    // Try to download it
    await runCommand("curl -L git.io/antigen > ~/antigen.zsh");
  }
  
  console.log("✅ antigen fixed");
}

async function fixAntidote() {
  console.log("Fixing antidote...");
  
  // Create empty plugin list
  const pluginListPath = expandPath("~/.zsh_plugins.txt");
  if (!await exists(pluginListPath)) {
    await Deno.writeTextFile(pluginListPath, "# Empty plugin list\n");
  }
  
  // Create the antidote script if missing
  const antidotePath = "/usr/local/share/antidote/antidote.zsh";
  if (!await exists(antidotePath)) {
    await ensureDir("/usr/local/share/antidote");
    // Create a minimal antidote function
    const antidoteScript = `#!/usr/bin/env zsh
# Minimal antidote implementation for benchmarking
antidote() {
  local cmd="\$1"
  case "\$cmd" in
    bundle)
      # Just source the plugins file
      if [[ -f ~/.zsh_plugins.zsh ]]; then
        source ~/.zsh_plugins.zsh
      fi
      ;;
    load)
      # Generate plugin file from .zsh_plugins.txt
      local plugin_file=~/.zsh_plugins.zsh
      echo "# Generated by antidote" > "\$plugin_file"
      while read -r plugin; do
        [[ -z "\$plugin" || "\$plugin" = \#* ]] && continue
        echo "# Loading \$plugin" >> "\$plugin_file"
      done < ~/.zsh_plugins.txt
      ;;
  esac
}
`;
    await Deno.writeTextFile(antidotePath, antidoteScript);
  }
  
  console.log("✅ antidote fixed");
}

async function fixZcomet() {
  console.log("Fixing zcomet...");
  
  // Create .zshrc.zcomet if missing
  const zcometRcPath = expandPath("~/.zshrc.zcomet");
  if (!await exists(zcometRcPath)) {
    await Deno.writeTextFile(zcometRcPath, "# Empty zcomet config\n");
  }
  
  console.log("✅ zcomet fixed");
}

// Main
if (import.meta.main) {
  await fixZim();
  await fixAntigen();
  await fixAntidote();
  await fixZcomet();
  
  console.log("\nAll managers fixed!");
}